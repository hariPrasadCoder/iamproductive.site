{"ast":null,"code":"import styled from'styled-components';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TimerContainer=styled.div`\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  padding: 2rem;\n`;const TimeDisplay=styled.div`\n  font-size: 15vw;\n  font-weight: bold;\n  color: white;\n  text-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);\n`;const TypeDisplay=styled.h2`\n  font-size: 3vw;\n  color: white;\n  margin: 0;\n  opacity: 0.9;\n`;export const Timer=_ref=>{let{time,type}=_ref;const formatTime=seconds=>{const mins=Math.floor(seconds/60);const secs=seconds%60;return`${mins.toString().padStart(2,'0')}:${secs.toString().padStart(2,'0')}`;};const getTypeText=()=>{switch(type){case'work':return'Work Time';case'shortBreak':return'Short Break';case'longBreak':return'Long Break';default:return'Work Time';}};return/*#__PURE__*/_jsxs(TimerContainer,{children:[/*#__PURE__*/_jsx(TypeDisplay,{children:getTypeText()}),/*#__PURE__*/_jsx(TimeDisplay,{children:formatTime(time)})]});};","map":{"version":3,"names":["styled","jsx","_jsx","jsxs","_jsxs","TimerContainer","div","TimeDisplay","TypeDisplay","h2","Timer","_ref","time","type","formatTime","seconds","mins","Math","floor","secs","toString","padStart","getTypeText","children"],"sources":["/Users/HariPrasad.Renganath/Documents/Temp Projects/Pomodoro clock/pomodoro-timer/src/components/Timer.js"],"sourcesContent":["import styled from 'styled-components';\n\nconst TimerContainer = styled.div`\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  padding: 2rem;\n`;\n\nconst TimeDisplay = styled.div`\n  font-size: 15vw;\n  font-weight: bold;\n  color: white;\n  text-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);\n`;\n\nconst TypeDisplay = styled.h2`\n  font-size: 3vw;\n  color: white;\n  margin: 0;\n  opacity: 0.9;\n`;\n\nexport const Timer = ({ time, type }) => {\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getTypeText = () => {\n    switch(type) {\n      case 'work':\n        return 'Work Time';\n      case 'shortBreak':\n        return 'Short Break';\n      case 'longBreak':\n        return 'Long Break';\n      default:\n        return 'Work Time';\n    }\n  };\n\n  return (\n    <TimerContainer>\n      <TypeDisplay>{getTypeText()}</TypeDisplay>\n      <TimeDisplay>{formatTime(time)}</TimeDisplay>\n    </TimerContainer>\n  );\n};"],"mappings":"AAAA,MAAO,CAAAA,MAAM,KAAM,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEvC,KAAM,CAAAC,cAAc,CAAGL,MAAM,CAACM,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAC,WAAW,CAAGP,MAAM,CAACM,GAAG;AAC9B;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAE,WAAW,CAAGR,MAAM,CAACS,EAAE;AAC7B;AACA;AACA;AACA;AACA,CAAC,CAED,MAAO,MAAM,CAAAC,KAAK,CAAGC,IAAA,EAAoB,IAAnB,CAAEC,IAAI,CAAEC,IAAK,CAAC,CAAAF,IAAA,CAClC,KAAM,CAAAG,UAAU,CAAIC,OAAO,EAAK,CAC9B,KAAM,CAAAC,IAAI,CAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAAG,EAAE,CAAC,CACrC,KAAM,CAAAI,IAAI,CAAGJ,OAAO,CAAG,EAAE,CACzB,MAAO,GAAGC,IAAI,CAACI,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,IAAIF,IAAI,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,EAAE,CAClF,CAAC,CAED,KAAM,CAAAC,WAAW,CAAGA,CAAA,GAAM,CACxB,OAAOT,IAAI,EACT,IAAK,MAAM,CACT,MAAO,WAAW,CACpB,IAAK,YAAY,CACf,MAAO,aAAa,CACtB,IAAK,WAAW,CACd,MAAO,YAAY,CACrB,QACE,MAAO,WAAW,CACtB,CACF,CAAC,CAED,mBACET,KAAA,CAACC,cAAc,EAAAkB,QAAA,eACbrB,IAAA,CAACM,WAAW,EAAAe,QAAA,CAAED,WAAW,CAAC,CAAC,CAAc,CAAC,cAC1CpB,IAAA,CAACK,WAAW,EAAAgB,QAAA,CAAET,UAAU,CAACF,IAAI,CAAC,CAAc,CAAC,EAC/B,CAAC,CAErB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}