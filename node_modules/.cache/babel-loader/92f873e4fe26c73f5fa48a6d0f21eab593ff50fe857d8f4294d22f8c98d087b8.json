{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst TIMER_SETTINGS = {\n  work: 25 * 60,\n  shortBreak: 5 * 60,\n  longBreak: 15 * 60\n};\nexport const useTimer = () => {\n  _s();\n  const [time, setTime] = useState(TIMER_SETTINGS.work);\n  const [isActive, setIsActive] = useState(false);\n  const [type, setType] = useState('work');\n  useEffect(() => {\n    let interval;\n    if (isActive && time > 0) {\n      interval = setInterval(() => {\n        setTime(time => time - 1);\n      }, 1000);\n    } else if (time === 0) {\n      handleTimerComplete();\n    }\n    return () => clearInterval(interval);\n  }, [isActive, time]);\n  const handleTimerComplete = () => {\n    const audio = new Audio('notification.mp3');\n    audio.play();\n    setIsActive(false);\n  };\n  const changeType = newType => {\n    setIsActive(false);\n    setType(newType);\n    setTime(TIMER_SETTINGS[newType]);\n  };\n  return {\n    time,\n    isActive,\n    type,\n    setTime,\n    setIsActive,\n    setType,\n    changeType\n  };\n};\n_s(useTimer, \"R/6ug8Tz08fGdxmi8vNczyWn0Fk=\");","map":{"version":3,"names":["useState","useEffect","TIMER_SETTINGS","work","shortBreak","longBreak","useTimer","_s","time","setTime","isActive","setIsActive","type","setType","interval","setInterval","handleTimerComplete","clearInterval","audio","Audio","play","changeType","newType"],"sources":["/Users/HariPrasad.Renganath/Documents/Temp Projects/Pomodoro clock/pomodoro-timer/src/hooks/useTimer.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst TIMER_SETTINGS = {\n  work: 25 * 60,\n  shortBreak: 5 * 60,\n  longBreak: 15 * 60\n};\n\nexport const useTimer = () => {\n  const [time, setTime] = useState(TIMER_SETTINGS.work);\n  const [isActive, setIsActive] = useState(false);\n  const [type, setType] = useState('work');\n\n  useEffect(() => {\n    let interval;\n    if (isActive && time > 0) {\n      interval = setInterval(() => {\n        setTime((time) => time - 1);\n      }, 1000);\n    } else if (time === 0) {\n      handleTimerComplete();\n    }\n    return () => clearInterval(interval);\n  }, [isActive, time]);\n\n  const handleTimerComplete = () => {\n    const audio = new Audio('notification.mp3');\n    audio.play();\n    setIsActive(false);\n  };\n\n  const changeType = (newType) => {\n    setIsActive(false);\n    setType(newType);\n    setTime(TIMER_SETTINGS[newType]);\n  };\n\n  return { \n    time, \n    isActive, \n    type, \n    setTime, \n    setIsActive, \n    setType,\n    changeType \n  };\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,cAAc,GAAG;EACrBC,IAAI,EAAE,EAAE,GAAG,EAAE;EACbC,UAAU,EAAE,CAAC,GAAG,EAAE;EAClBC,SAAS,EAAE,EAAE,GAAG;AAClB,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAACE,cAAc,CAACC,IAAI,CAAC;EACrD,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,MAAM,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,IAAIa,QAAQ;IACZ,IAAIJ,QAAQ,IAAIF,IAAI,GAAG,CAAC,EAAE;MACxBM,QAAQ,GAAGC,WAAW,CAAC,MAAM;QAC3BN,OAAO,CAAED,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;MAC7B,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MAAM,IAAIA,IAAI,KAAK,CAAC,EAAE;MACrBQ,mBAAmB,CAAC,CAAC;IACvB;IACA,OAAO,MAAMC,aAAa,CAACH,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACJ,QAAQ,EAAEF,IAAI,CAAC,CAAC;EAEpB,MAAMQ,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAME,KAAK,GAAG,IAAIC,KAAK,CAAC,kBAAkB,CAAC;IAC3CD,KAAK,CAACE,IAAI,CAAC,CAAC;IACZT,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,MAAMU,UAAU,GAAIC,OAAO,IAAK;IAC9BX,WAAW,CAAC,KAAK,CAAC;IAClBE,OAAO,CAACS,OAAO,CAAC;IAChBb,OAAO,CAACP,cAAc,CAACoB,OAAO,CAAC,CAAC;EAClC,CAAC;EAED,OAAO;IACLd,IAAI;IACJE,QAAQ;IACRE,IAAI;IACJH,OAAO;IACPE,WAAW;IACXE,OAAO;IACPQ;EACF,CAAC;AACH,CAAC;AAACd,EAAA,CAtCWD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}