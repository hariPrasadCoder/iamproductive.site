{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { getRandomQuote } from './quotes';\nconst DEFAULT_SETTINGS = {\n  work: 25 * 60,\n  shortBreak: 5 * 60,\n  longBreak: 15 * 60\n};\nexport const useTimer = () => {\n  _s();\n  const [settings, setSettings] = useState(JSON.parse(localStorage.getItem('timerSettings')) || DEFAULT_SETTINGS);\n  const [time, setTime] = useState(settings.work);\n  const [isActive, setIsActive] = useState(false);\n  const [type, setType] = useState('work');\n  const [showConfetti, setShowConfetti] = useState(false);\n  useEffect(() => {\n    localStorage.setItem('timerSettings', JSON.stringify(settings));\n  }, [settings]);\n  useEffect(() => {\n    let interval;\n    if (isActive && time > 0) {\n      interval = setInterval(() => {\n        setTime(time => time - 1);\n      }, 1000);\n    } else if (time === 0) {\n      handleTimerComplete();\n    }\n    return () => clearInterval(interval);\n  }, [isActive, time]);\n  const handleTimerComplete = () => {\n    setIsActive(false);\n    setShowConfetti(true);\n\n    // Show notification\n    toast.success(`${type.charAt(0).toUpperCase() + type.slice(1)} session completed!`, {\n      position: \"top-right\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true\n    });\n\n    // Hide confetti after 5 seconds\n    setTimeout(() => setShowConfetti(false), 5000);\n  };\n  const changeType = newType => {\n    setIsActive(false);\n    setType(newType);\n    setTime(settings[newType]);\n  };\n  const updateSettings = newSettings => {\n    setSettings(newSettings);\n    setTime(newSettings[type]);\n  };\n  const [currentQuote, setCurrentQuote] = useState(null);\n  const startTimer = () => {\n    setIsActive(true);\n    const quote = getRandomQuote();\n    setCurrentQuote(quote);\n    toast.info(`\"${quote.text}\" - ${quote.author}`, {\n      position: \"top-center\",\n      autoClose: 4000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true\n    });\n  };\n  return {\n    time,\n    isActive,\n    type,\n    settings,\n    showConfetti,\n    setTime,\n    setIsActive,\n    setType,\n    changeType,\n    updateSettings,\n    currentQuote,\n    startTimer\n  };\n};\n_s(useTimer, \"+V56L3QEE19hDY/ysH3b2gxECx4=\");","map":{"version":3,"names":["useState","useEffect","toast","getRandomQuote","DEFAULT_SETTINGS","work","shortBreak","longBreak","useTimer","_s","settings","setSettings","JSON","parse","localStorage","getItem","time","setTime","isActive","setIsActive","type","setType","showConfetti","setShowConfetti","setItem","stringify","interval","setInterval","handleTimerComplete","clearInterval","success","charAt","toUpperCase","slice","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","setTimeout","changeType","newType","updateSettings","newSettings","currentQuote","setCurrentQuote","startTimer","quote","info","text","author"],"sources":["/Users/HariPrasad.Renganath/Documents/Temp Projects/Pomodoro clock/pomodoro-timer/src/hooks/useTimer.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { getRandomQuote } from './quotes';\n\nconst DEFAULT_SETTINGS = {\n  work: 25 * 60,\n  shortBreak: 5 * 60,\n  longBreak: 15 * 60\n};\n\nexport const useTimer = () => {\n  const [settings, setSettings] = useState(\n    JSON.parse(localStorage.getItem('timerSettings')) || DEFAULT_SETTINGS\n  );\n  const [time, setTime] = useState(settings.work);\n  const [isActive, setIsActive] = useState(false);\n  const [type, setType] = useState('work');\n  const [showConfetti, setShowConfetti] = useState(false);\n\n  useEffect(() => {\n    localStorage.setItem('timerSettings', JSON.stringify(settings));\n  }, [settings]);\n\n  useEffect(() => {\n    let interval;\n    if (isActive && time > 0) {\n      interval = setInterval(() => {\n        setTime((time) => time - 1);\n      }, 1000);\n    } else if (time === 0) {\n      handleTimerComplete();\n    }\n    return () => clearInterval(interval);\n  }, [isActive, time]);\n\n  const handleTimerComplete = () => {\n    setIsActive(false);\n    setShowConfetti(true);\n    \n    // Show notification\n    toast.success(`${type.charAt(0).toUpperCase() + type.slice(1)} session completed!`, {\n      position: \"top-right\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n    });\n\n    // Hide confetti after 5 seconds\n    setTimeout(() => setShowConfetti(false), 5000);\n  };\n\n  const changeType = (newType) => {\n    setIsActive(false);\n    setType(newType);\n    setTime(settings[newType]);\n  };\n\n  const updateSettings = (newSettings) => {\n    setSettings(newSettings);\n    setTime(newSettings[type]);\n  };\n\n  const [currentQuote, setCurrentQuote] = useState(null);\n\n  const startTimer = () => {\n    setIsActive(true);\n    const quote = getRandomQuote();\n    setCurrentQuote(quote);\n    toast.info(`\"${quote.text}\" - ${quote.author}`, {\n      position: \"top-center\",\n      autoClose: 4000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n    });\n  };\n\n  return { \n    time, \n    isActive, \n    type, \n    settings,\n    showConfetti,\n    setTime, \n    setIsActive, \n    setType,\n    changeType,\n    updateSettings,\n    currentQuote,\n    startTimer\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}