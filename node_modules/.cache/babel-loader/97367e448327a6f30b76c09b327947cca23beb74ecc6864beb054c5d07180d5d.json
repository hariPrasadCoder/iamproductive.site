{"ast":null,"code":"var _jsxFileName = \"/Users/HariPrasad.Renganath/Documents/Temp Projects/Pomodoro clock/pomodoro-timer/src/components/TimeSettings.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react'; // Added this import\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SettingsModal = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: rgba(255, 255, 255, 0.15);\n  backdrop-filter: blur(15px);\n  padding: 2rem;\n  border-radius: 20px;\n  z-index: 1000;\n`;\n_c = SettingsModal;\nconst Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  z-index: 999;\n`;\n_c2 = Overlay;\nconst Input = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  margin: 0.5rem 0;\n  border: none;\n  border-radius: 8px;\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n  font-size: 1rem;\n\n  &:focus {\n    outline: none;\n    background: rgba(255, 255, 255, 0.3);\n  }\n`;\n_c3 = Input;\nconst Button = styled.button`\n  padding: 0.5rem 1rem;\n  margin: 0.5rem;\n  border: none;\n  border-radius: 8px;\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n  cursor: pointer;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background: rgba(255, 255, 255, 0.3);\n  }\n`;\n_c4 = Button;\nexport const TimeSettings = ({\n  isOpen,\n  onClose,\n  settings,\n  onSave\n}) => {\n  _s();\n  const [tempSettings, setTempSettings] = useState({\n    work: settings.work / 60,\n    shortBreak: settings.shortBreak / 60,\n    longBreak: settings.longBreak / 60\n  });\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Overlay, {\n      onClick: onClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SettingsModal, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Timer Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Work Duration (minutes)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"number\",\n          value: tempSettings.work,\n          onChange: e => setTempSettings({\n            ...tempSettings,\n            work: parseInt(e.target.value)\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Short Break (minutes)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"number\",\n          value: tempSettings.shortBreak,\n          onChange: e => setTempSettings({\n            ...tempSettings,\n            shortBreak: parseInt(e.target.value)\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Long Break (minutes)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"number\",\n          value: tempSettings.longBreak,\n          onChange: e => setTempSettings({\n            ...tempSettings,\n            longBreak: parseInt(e.target.value)\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => onSave({\n          work: tempSettings.work * 60,\n          shortBreak: tempSettings.shortBreak * 60,\n          longBreak: tempSettings.longBreak * 60\n        }),\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(TimeSettings, \"fNR+rSapwtNvo/LyPYfNVakD3mw=\");\n_c5 = TimeSettings;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"SettingsModal\");\n$RefreshReg$(_c2, \"Overlay\");\n$RefreshReg$(_c3, \"Input\");\n$RefreshReg$(_c4, \"Button\");\n$RefreshReg$(_c5, \"TimeSettings\");","map":{"version":3,"names":["useState","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","SettingsModal","div","_c","Overlay","_c2","Input","input","_c3","Button","button","_c4","TimeSettings","isOpen","onClose","settings","onSave","_s","tempSettings","setTempSettings","work","shortBreak","longBreak","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","parseInt","target","_c5","$RefreshReg$"],"sources":["/Users/HariPrasad.Renganath/Documents/Temp Projects/Pomodoro clock/pomodoro-timer/src/components/TimeSettings.js"],"sourcesContent":["import { useState } from 'react';  // Added this import\nimport styled from 'styled-components';\n\nconst SettingsModal = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: rgba(255, 255, 255, 0.15);\n  backdrop-filter: blur(15px);\n  padding: 2rem;\n  border-radius: 20px;\n  z-index: 1000;\n`;\n\nconst Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  z-index: 999;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  margin: 0.5rem 0;\n  border: none;\n  border-radius: 8px;\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n  font-size: 1rem;\n\n  &:focus {\n    outline: none;\n    background: rgba(255, 255, 255, 0.3);\n  }\n`;\n\nconst Button = styled.button`\n  padding: 0.5rem 1rem;\n  margin: 0.5rem;\n  border: none;\n  border-radius: 8px;\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n  cursor: pointer;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background: rgba(255, 255, 255, 0.3);\n  }\n`;\n\nexport const TimeSettings = ({ isOpen, onClose, settings, onSave }) => {\n  const [tempSettings, setTempSettings] = useState({\n    work: settings.work / 60,\n    shortBreak: settings.shortBreak / 60,\n    longBreak: settings.longBreak / 60,\n  });\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      <Overlay onClick={onClose} />\n      <SettingsModal>\n        <h2>Timer Settings</h2>\n        <div>\n          <label>Work Duration (minutes)</label>\n          <Input\n            type=\"number\"\n            value={tempSettings.work}\n            onChange={(e) => setTempSettings({\n              ...tempSettings,\n              work: parseInt(e.target.value)\n            })}\n          />\n        </div>\n        <div>\n          <label>Short Break (minutes)</label>\n          <Input\n            type=\"number\"\n            value={tempSettings.shortBreak}\n            onChange={(e) => setTempSettings({\n              ...tempSettings,\n              shortBreak: parseInt(e.target.value)\n            })}\n          />\n        </div>\n        <div>\n          <label>Long Break (minutes)</label>\n          <Input\n            type=\"number\"\n            value={tempSettings.longBreak}\n            onChange={(e) => setTempSettings({\n              ...tempSettings,\n              longBreak: parseInt(e.target.value)\n            })}\n          />\n        </div>\n        <Button onClick={() => onSave({\n          work: tempSettings.work * 60,\n          shortBreak: tempSettings.shortBreak * 60,\n          longBreak: tempSettings.longBreak * 60,\n        })}>Save</Button>\n        <Button onClick={onClose}>Cancel</Button>\n      </SettingsModal>\n    </>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}